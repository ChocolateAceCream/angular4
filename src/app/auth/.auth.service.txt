//service for authentication
import { Router } from '@angular/router';
import * as firebase from 'firebase';
import { Injectable } from '@angular/core';
import { Store } from "@ngrx/store";
import * as fromApp from "../store/app.reducers";
import * as AuthActions from './store/auth.actions';
@Injectable()
//Injectable allow a service inject other service into it
export class AuthService {
    //token: string;

    constructor(private router: Router, private store: Store<fromApp.AppState>) {}
    signupUser(email: string, password: string) {
        //method used to sign user up
        //auth method listen to the resovle of method call
        //createUserWithEmailAndPassword, then auth method will return a promise
        //since auth will return a promise, we can use then method to subscribe
        //to it, but here we only want to catch errors:
        firebase.auth().createUserWithEmailAndPassword(email, password)
            .then(
                user => {
                    this.store.dispatch(new AuthActions.Signup());
                    firebase.auth().currentUser.getIdToken()
                        .then(
                            (token: string) => {
                                this.store.dispatch(new AuthActions.SetToken(token));
                            }
                        )
                }
            )
            .catch(
                error => console.log(error)
            )

    }

    signinUser(email: string, password: string) {
        firebase.auth().signInWithEmailAndPassword(email, password)
            .then(
                response => {
                    //dispatch action to signin the user
                    this.store.dispatch(new AuthActions.Signin());
                    //redirect to root page after successful signin
                    this.router.navigate(['/']);
                    firebase.auth().currentUser.getIdToken()
                        .then(
                            (token: string) => {
                                this.store.dispatch(new AuthActions.SetToken(token));
                            }
                        )
                }
            )
            .catch(
                error => console.log(error)
            )
    }

    //since we using store, we dont need to get token manually here
    //getToken() {
    //    firebase.auth().currentUser.getIdToken()
    //        .then(
    //            (token: string) => this.token = token
    //        );
    //    return this.token;//might return the expired token, add error handling later
    //}

    /*
    isAuthenticated() {
        return this.token != null;
        //firebase will clean the local storage itself, but we need to reset the
        //token
    }
    */

    logout() {
        firebase.auth().signOut();
        this.router.navigate(['/']);
    }

}
